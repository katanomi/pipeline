kind: Build
apiVersion: builds.katanomi.dev/v1alpha1
spec:
  workspaces:
  - name: source
  - name: source-tkn
  - name: source-git-init
  - name: cache
  tasks:
    ### security scan
    - name: trivy-repo-scan
      timeout: 30m
      retries: 0
      taskRef:
        resolver: katanomi.hub
        params:
          - name: kind
            value: task
          - name: name
            value: go-build
      workspaces:
      - name: source
        workspace: source
      - name: cache
        workspace: cache
      when:
      - input: $(build.git.revision.type)
        operator: in
        values:
        - "PullRequest"
      params:
      - name: command
        value: |
          export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,direct
          export GOMAXPROCS=4
          if [ "$GOCACHE" != "" ]; then
            export TOOLBIN=$GOCACHE/../toolbin
            mkdir -p $TOOLBIN
            ls -la $TOOLBIN
          fi

          mkdir -p bin
          export TRIVY_CACHE=$GOCACHE/trivydb
          export TRIVY_DB_REPO=build-harbor.alauda.cn/ops/aquasecurity/trivy-db
          export TRIVY_REPORT_OUTPUT=bin/trivy-report.json
          export TRIVY_SEVERITY=UNKNOWN,MEDIUM,HIGH,CRITICAL
          make trivy-repo-scan
          # TODO: Add report back to PR
      - name: build-outputs-path
        value:
        - "./bin/trivy-report.json"
      - name: tool-image
        value: registry.alauda.cn:60080/devops/builder-go:latest
    ### security scan
    - name: govulncheck
      timeout: 30m
      retries: 0
      taskRef:
        resolver: katanomi.hub
        params:
          - name: kind
            value: task
          - name: name
            value: go-build
      workspaces:
      - name: source
        workspace: source
      - name: cache
        workspace: cache
      when:
      - input: $(build.git.revision.type)
        operator: in
        values:
        - "PullRequest"
      params:
      - name: command
        value: |
          export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,direct
          export GOMAXPROCS=8
          if [ "$GOCACHE" != "" ]; then
            export TOOLBIN=$GOCACHE/../toolbin
            mkdir -p $TOOLBIN
            ls -la $TOOLBIN
          fi

          mkdir -p bin
          export VULNCHECK_OUTPUT=bin/vulncheck.txt
          # do not throw an error here immediately, but check whether it should fail in the subsequent logic
          make vulncheck || true
          # count means the line number which contains 'Fixed in' and has fix version
          count=$(grep 'Fixed in' "$VULNCHECK_OUTPUT" | grep -v 'Fixed in: N/A' | wc -l)
          if [ "$count" -gt 0 ]; then
          echo "==> ❌ there are $count vulnerability need to be fixed"
          exit 1
          else
          echo "==> ✅ there is no vulnerability need to be fixed"
          fi
          # TODO: Add report back to PR
      - name: build-outputs-path
        value:
        - "./bin/vulncheck.txt"

      - name: tool-image
        value: registry.alauda.cn:60080/devops/builder-go:latest
    ## read oss version
    - name: oss-version
      taskRef:
        kind: ClusterTask
        name: alauda-read-oss-version
      params:
      - name: version-file-path
        value: ".build/opensource-version"
      workspaces:
      - name: source
        workspace: source
    - name: golang-test
      taskRef:
        kind: ClusterTask
        name: go-unit-test
      runAfter:
        - oss-version
      params:
        - name: command
          value: |
            export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,https://goproxy.cn,direct
            export CGO_ENABLED=0
            export GONOSUMDB=*
            export GOMAXPROCS=8
            go mod download

            go test -v -json -coverprofile cover.out ./... | tee test.json

        - name: quality-gate-rules
          value:
            - lines-coverage=10
            - passed-tests-rate=100
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
        - name: test-report-path
          value: ./test.json
        - name: coverage-report-path
          value: ./cover.out
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
    ## ko publish image
    - name: build-entrypoint
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/pipeline/cmd/entrypoint"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/entrypoint"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
    ## ko publish image
    - name: build-pipeline-controller
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/pipeline/cmd/controller"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/controller"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
    ## ko publish image
    - name: build-pipeline-webhook
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/pipeline/cmd/webhook"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/webhook"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
    ## ko publish image
    - name: build-pipeline-nop
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/pipeline/cmd/nop"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/nop"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
    ## ko publish image
    - name: build-pipeline-workingdirinit
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/pipeline/cmd/workingdirinit"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/workingdirinit"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
    ## ko publish image
    - name: build-pipeline-resolvers
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/pipeline/cmd/resolvers"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/resolvers"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
    # ko publish image
    - name: build-pipeline-events
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/pipeline/cmd/events"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/events"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
    # ko publish image
    - name: build-pipeline-sidecarlogresults
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/pipeline/cmd/sidecarlogresults"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/sidecarlogresults"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest

    # clone tkn
    - name: clone-tkn
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-git-clone
      workspaces:
        - name: source
          workspace: source-tkn
      params:
        - name: url
          value: "https://github.com/tektoncd/cli.git"
        - name: revision
          # use the latest release tag
          # https://github.com/tektoncd/cli/releases
          value: "refs/tags/v0.34.0"
    # modify the .ko.yaml
    - name: modify-tkn-koyaml
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: run-script
      workspaces:
        - name: source
          workspace: source-tkn
      runAfter:
        - clone-tkn
      params:
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
        - name: command
          value: |
            export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,https://goproxy.cn,direct
            export CGO_ENABLED=0
            export GONOSUMDB=*

            # modify th go.mod to fix vuln
            go get github.com/go-jose/go-jose/v3@v3.0.3
            go get github.com/sigstore/cosign/v2@v2.2.4
            go get golang.org/x/net@v0.23.0
            go get google.golang.org/protobuf@v1.33.0
            go get gopkg.in/go-jose/go-jose.v2@v2.6.3
            go get github.com/hashicorp/go-retryablehttp@v0.7.7
            go get github.com/Azure/azure-sdk-for-go/sdk/azidentity@v1.6.0
            go get github.com/docker/docker@v27.1
            go mod tidy
            go mod vendor

            cat <<EOF > .ko.yaml
            defaultBaseImage: build-harbor.alauda.cn/ops/distroless-static-nonroot:20220806
            EOF

    ## ko publish image
    - name: build-tkn
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          workspace: source-tkn
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
        - modify-tkn-koyaml
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd/cli/cmd/tkn"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/cli/cmd/tkn"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest

    # clone git-init
    - name: clone-git-init
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-git-clone
      workspaces:
        - name: source
          workspace: source-git-init
      params:
        - name: url
          value: "https://github.com/tektoncd-catalog/git-clone.git"
        - name: revision
          # this component is not released yet, so use the latest commit
          # value: "refs/heads/main"
          value: "b33cc3e770a41900b59c197412c0c8ab9fa5a026"
    # modify the .ko.yaml
    - name: modify-git-init-koyaml
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: run-script
      workspaces:
        - name: source
          workspace: source-git-init
      runAfter:
        - clone-git-init
      params:
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest
        - name: command
          value: |
            # copy files to kodata, avoid next step build error
            rm -rf image/git-init/kodata/LICENSE image/git-init/kodata/third_party
            cp -rf LICENSE image/git-init/kodata/

            export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,https://goproxy.cn,direct
            export CGO_ENABLED=0
            export GONOSUMDB=*

            # modify th go.mod to fix vuln
            cd image/git-init/
            go get golang.org/x/net@v0.24.0
            go get google.golang.org/grpc@v1.56.3
            go get google.golang.org/protobuf@v1.33.0
            go mod tidy
            go mod vendor

            cat <<EOF > .ko.yaml
            defaultBaseImage: build-harbor.alauda.cn/ops/distroless-static-nonroot:20220806
            baseImageOverrides:
              # git-init uses a base image that includes Git, and supports running either
              # as root or as user nonroot with UID 65532.
              # image latest-glibc-hack is from katanomi tekton-operator hack Dockerfile
              github.com/tektoncd-catalog/git-clone/git-init: build-harbor.alauda.cn/3rdparty/cgr.dev/chainguard/git:latest-glibc-hack-20240527
            EOF

    ## ko publish image
    - name: build-git-init
      timeout: 30m
      retries: 1
      taskRef:
        kind: ClusterTask
        name: alauda-ko-build
      workspaces:
        - name: source
          subPath: image/git-init
          workspace: source-git-init
        - name: cache
          workspace: cache
      runAfter:
        - oss-version
        - modify-git-init-koyaml
      params:
        - name: verbose
          value: "false"
        - name: ko-version
          value: "0.15.1"
        - name: import-path
          value: "github.com/tektoncd-catalog/git-clone/git-init"
        - name: container-image
          value: "build-harbor.alauda.cn/devops/tektoncd/pipeline/cmd/git-init"
        - name: container-image-tag
          value: v$(tasks.oss-version.results.oss-version)-$(tasks.oss-version.results.commit-short-id)
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go:latest

    #################
    # code-scan
    #################
    - name: code-scan
      timeout: 30m
      retries: 1
      runAfter:
        - golang-test
      taskRef:
        kind: ClusterTask
        name: sonarqube-analysis
      workspaces:
        - name: source
          workspace: source
      params:
        - name: server
          value: https://build-sonar.alauda.cn

    - name: trivy-scan-1
      timeout: 30m
      retries: 1
      taskRef:
        resolver: katanomi.hub
        params:
          - name: kind
            value: task
          - name: name
            value: trivy-image-scan
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      when:
      - input: $(build.git.revision.type)
        operator: in
        values:
        - "PullRequest"
      params:
        - name: targets
          value:
            - $(tasks.build-entrypoint.results.ociContainerImageBuild-url)
            - $(tasks.build-pipeline-controller.results.ociContainerImageBuild-url)
            - $(tasks.build-pipeline-webhook.results.ociContainerImageBuild-url)
            - $(tasks.build-pipeline-nop.results.ociContainerImageBuild-url)
        - name: quality-gate-rules
          value:
            - severity=Medium
        - name: scan-flags
          value:
            - db.skip-update=false
            - db.repository=build-harbor.alauda.cn/ops/aquasecurity/trivy-db

    - name: trivy-scan-2
      timeout: 30m
      retries: 1
      taskRef:
        resolver: katanomi.hub
        params:
          - name: kind
            value: task
          - name: name
            value: trivy-image-scan
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      when:
      - input: $(build.git.revision.type)
        operator: in
        values:
        - "PullRequest"
      params:
        - name: targets
          value:
            - $(tasks.build-pipeline-workingdirinit.results.ociContainerImageBuild-url)
            - $(tasks.build-pipeline-resolvers.results.ociContainerImageBuild-url)
            - $(tasks.build-pipeline-events.results.ociContainerImageBuild-url)
            - $(tasks.build-pipeline-sidecarlogresults.results.ociContainerImageBuild-url)
        - name: quality-gate-rules
          value:
            - severity=Medium
        - name: scan-flags
          value:
            - db.skip-update=false
            - db.repository=build-harbor.alauda.cn/ops/aquasecurity/trivy-db

    - name: trivy-scan-ktn
      timeout: 30m
      retries: 1
      taskRef:
        resolver: katanomi.hub
        params:
          - name: kind
            value: task
          - name: name
            value: trivy-image-scan
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      when:
      - input: $(build.git.revision.type)
        operator: in
        values:
        - "PullRequest"
      params:
        - name: targets
          value:
            - $(tasks.build-tkn.results.ociContainerImageBuild-url)
        - name: quality-gate-rules
          value:
            - severity=Critical
        - name: scan-flags
          value:
            - db.skip-update=false
            - db.repository=build-harbor.alauda.cn/ops/aquasecurity/trivy-db

    - name: trivy-scan-git-init
      timeout: 30m
      retries: 1
      taskRef:
        resolver: katanomi.hub
        params:
          - name: kind
            value: task
          - name: name
            value: trivy-image-scan
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      when:
      - input: $(build.git.revision.type)
        operator: in
        values:
        - "PullRequest"
      params:
        - name: targets
          value:
            - $(tasks.build-git-init.results.ociContainerImageBuild-url)
        - name: quality-gate-rules
          value:
            - severity=Critical
        - name: scan-flags
          value:
            - db.skip-update=false
            - db.repository=build-harbor.alauda.cn/ops/aquasecurity/trivy-db

  #################
  # runTemplate
  #################
  runTemplate:
    spec:
      workspaces:
      - name: cache
        persistentVolumeClaim:
          claimName: build-cache
      - name: source-git-init
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1000Mi
      - name: source-tkn
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1000Mi
      taskRunSpecs:
        - pipelineTaskName: trivy-repo-scan
          stepOverrides:
          - name: go-build
            resources:
              requests:
                cpu: "1"
                memory: 1Gi
              limits:
                cpu: "1"
                memory: 1Gi
        - pipelineTaskName: govulncheck
          stepOverrides:
          - name: go-build
            resources:
              requests:
                cpu: "8"
                memory: 10Gi
              limits:
                cpu: "8"
                memory: 10Gi
        - pipelineTaskName: golang-test
          stepOverrides:
            - name: prepare
              resources:
                limits:
                  cpu: 100m
                  memory: 100Mi
                requests:
                  cpu: 50m
                  memory: 50Mi
            - name: test
              resources:
                requests:
                  cpu: "6"
                  memory: 4Gi
                limits:
                  cpu: "8"
                  memory: 6Gi
            - name: analysis
              resources:
                limits:
                  cpu: 100m
                  memory: 100Mi
                requests:
                  cpu: 50m
                  memory: 50Mi
        - pipelineTaskName: build-git-init
          stepOverrides:
            - name: build
              resources:
                requests:
                  cpu: "4"
                  memory: "4Gi"
                limits:
                  cpu: "6"
                  memory: "6Gi"
        - pipelineTaskName: modify-git-init-koyaml
          stepOverrides:
            - name: run
              resources:
                requests:
                  cpu: "500m"
                  memory: "512Mi"
                limits:
                  cpu: "1"
                  memory: "1Gi"
        - pipelineTaskName: modify-tkn-koyaml
          stepOverrides:
            - name: run
              resources:
                requests:
                  cpu: "500m"
                  memory: "512Mi"
                limits:
                  cpu: "1"
                  memory: "1Gi"
